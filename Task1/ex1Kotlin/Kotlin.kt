// Функция для проверки, могут ли все пользоваться сотовой связью
fun checkCoverage(n: Int, x: Int, towers: String): Boolean {
    // Проверка корректности входных данных
    if (n <= 0 || x < 0 || towers.length != n) {
        return false // Если данные некорректны, сразу возвращаем false
    }

    val covered = BooleanArray(n) { false } // Массив для отслеживания покрытия, изначально все элементы равны false

    // Проходим по всем вышкам
    for (i in 0 until n) {
        // Если вышка работает (towers[i] == '1'), она может покрыть свои соседние позиции
        if (towers[i] == '1') {
            // Обновляем зоны покрытия для текущей вышки
            for (j in (i - x).coerceAtLeast(0) until (i + x + 1).coerceAtMost(n)) {
                covered[j] = true // Заносим в массив, что эта позиция покрыта сотовой связью
            }
        }
    }

    // Проверяем, все ли позиции покрыты (все элементы массива covered должны быть true)
    return covered.all { it } // Если все элементы массива true, возвращаем true
}

fun main() {
    // Ввод данных с консоли
    println("Введите количество вышек: ")
    // Чтение числа вышек, проверка на корректность ввода
    val n = readLine()?.toIntOrNull() ?: run {
        println("No") // Если ввод некорректный, выводим "No"
        return
    }

    println("Введите показатель покрытия: ")
    // Чтение показателя покрытия, проверка на корректность ввода
    val x = readLine()?.toIntOrNull() ?: run {
        println("No") // Если ввод некорректный, выводим "No"
        return
    }

    println("Введите строку состояния вышек: ")
    // Чтение строки состояния вышек
    val towers = readLine()

    // Проверка корректности введенной строки (она не должна быть пустой и должна содержать только '0' и '1')
    if (towers == null || towers.length != n || !towers.all { it == '0' || it == '1' }) {
        println("No") // Если данные некорректные, выводим "No"
        return
    }

    // Выводим результат проверки покрытия
    // Если все позиции покрыты, выводим "Yes", иначе "No"
    println(if (checkCoverage(n, x, towers)) "Yes" else "No")
}


//java -jar Kotlin.jar